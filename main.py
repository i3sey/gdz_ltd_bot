import asyncio
import io
import logging
import pickle

import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked, PhotoDimensions

import config


arrows = InlineKeyboardMarkup()
langs = InlineKeyboardMarkup()


class Parameters:
    lesson = 0
    number = 1
    delCount = 5
    lang = 'Russian'
    info = ''
    creator = ''
    mainButton = ''
    settings = ''
    start = types.ReplyKeyboardMarkup(resize_keyboard=True)



def Lang(number):
    match Parameters.lang:
        case 'Russian':
            russianLang = [
                "<b>üìù–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n‚úçÔ∏è–ë–æ—Ç –Ω–∞–π–¥—ë—Ç –∏ —Å–∫–∏–Ω–µ—Ç –≤–∞–º –≥–¥–∑ –∏–∑ —É—á–µ–±–Ω–∏–∫–∞ –¢–µ—Ä-–¢–∏–Ω–∞—Å–æ–≤–æ–π –∑–∞ 8 –∫–ª–∞—Å—Å –≤ 2 —á–∞—Å—Ç—è—Ö\nüëæ–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: <a href='https://github.com/i3sey/gdz_ltd_bot'>—Ç—É—Ç</a>",
                "–ë–æ—Ç–∞ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç @i3sey. –ñ–¥—É –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π **<3.**",
                '‚úçÔ∏è–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:',
                "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—Éüëá",
                '–£ —Ç–µ–±—è –Ω–µ—Ç –∞–¥–º–∏–Ω–∫–∏\n*–ö—É–¥–∞ —Ç—ã –ø–æ–ª–µ–∑?*',
                '*–ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ñ—Ä—ã*, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
                "‚úçÔ∏è–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
                "_–°–µ–∫—É–Ω–¥—É..._",
                "ü§∑–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å—ë *–≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ*",
                'üìù–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                'üßë‚Äçüé§–°–æ–∑–¥–∞—Ç–µ–ª—å',
                'üëã–ü–æ–ª—É—á–∏—Ç—å –ì–î–ó',
                'üîß–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                '–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:'
            ]
            return russianLang[number]
        case 'English':
            EnglishLang = [
                "<b>üìùInformation:</b>\n‚úçÔ∏èThe bot will find and send you the gdz from Ter-Minasova's textbook for the 8th grade in 2 parts\nüëæSource code: <a href='https://github.com/i3sey/gdz_ltd_bot'>here</a>",
                "The bot is being developed by @i3sey. I am waiting for complaints and suggestions **<3.**",
                '‚úçÔ∏èEnter the lesson number:',
                "I didn't understand you, use the buttons at the bottomüëá",
                "You don't have an admin panel\n*Where are you going?*",
                '*Use numbers*, please',
                "‚úçÔ∏èEnter the exercise number:",
                "_Just a second..._",
                "ü§∑There is no such number, make sure that everything * is entered correctly*",
                'üìùInformation',
                'üßë‚Äçüé§Creator',
                'üëãGet GDZ',
                'üîßSettings',
                'Select language'
            ]
            return EnglishLang[number]
        case 'roflRus':
            RoflLang = [
                "<b>üìù–ò–Ω—Ñ–∞:</b>\n‚úçÔ∏è–î–æ–º–∞—à–∫—É –∫–∏–¥–∞–µ—Ç –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É(–ø–æ–∫–∞ —á—Ç–æ), —á—Ç–æ –µ—â–µ —Ç—É—Ç –ø–∏–∑–¥–µ—Ç—å?\nüëæ–ï—Å–ª–∏ –¥–æ—Ö—É—è —É–º–Ω—ã–π, –≤–æ—Ç –∏—Å—Ö–æ–¥–Ω–∏–∫–∏: <a href='https://github.com/i3sey/gdz_ltd_bot'>—Ö—É–π</a>",
                "–ê—Ö—É–µ–Ω—ã–π —á–µ–ª–∏–∫ ‚Äî @i3sey. –ï—Å–ª–∏ –±–∞–±–æ–∫ –¥–æ—Ö—É—è, –ø–∏—à–∏—Ç–µ, –ø–æ–º–æ–≥—É –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å **8=====D.**",
                '‚úçÔ∏è–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –±–ª—è—Ç—å:',
                "–°—É–∫–∞, –µ–±–ª–∞–Ω, –∫–Ω–æ–ø–∫–∏ –Ω–∞–∂–∏–º–∞–πüëá",
                "–¢–´ –ß–¢–û –ê–•–£–ï–õ, –£ –¢–ï–ë–Ø –î–ê–ñ–ï –ê–î–ú–ò–ù–ö–ò –ù–ï–¢\n*–ò–î–ò –ù–ê–•–£–ô*",
                '*–ü–æ—à–µ–ª –Ω–∞—Ö—É–π*, –¶–´–§–ï–†–ê–ú–ò –ë–õ–Ø–¢–¨',
                "‚úçÔ∏è–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –±–ª—è—Ç—å:",
                "_–ü–æ–π–¥—É –æ–±–∫–∞—à–ª—è—é –≤–æ–ø—Ä–æ—Å–∏–∫..._",
                "ü§∑–ï–ë–õ–ê–ù, *–ù–ï–¢ –¢–£–¢ –¢–ê–ö–û–ì–û*",
                'üìù–ò–Ω—Ñ–∞',
                'üßë‚Äçüé§–ü–∏–∑–¥–∞—Ç—ã–π —á–µ–ª',
                'üëã–ù–ê –ü–û –ï–ë–ê–õ–£',
                'üîß–í–æ–ø—Ä–æ—Å–∏–∫–∏',
                '–ó–∞ –±–∞–∑–∞—Ä–æ–º-—Ç–æ —Å–ª–µ–¥–∏:'
            ]
            return RoflLang[number]
        case _:
            return russianLang[number]


arrows.add(
    InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='–ü—Ä–µ–¥—ã–¥—É—â–∏–∏–π –Ω–æ–º–µ—Ä'),
    InlineKeyboardButton('‚ùå', callback_data='–£–¥–∞–ª–∏—Ç—å'),
    InlineKeyboardButton('‚û°Ô∏è', callback_data='–°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä')
)


logging.basicConfig(
    filemode='logs.log',
    level=logging.INFO
)

storage = MemoryStorage()
bot = Bot(token=config.token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
VERSION = 2.1


async def caseChoose(message):
    match message.text:
        case 'üìù–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' | 'üìùInformation' | 'üìù–ò–Ω—Ñ–∞':
            await bot.send_message(message.chat.id,
                                   text=Lang(0),
                                   parse_mode='HTML')
        case 'üßë‚Äçüé§–°–æ–∑–¥–∞—Ç–µ–ª—å' | 'üßë‚Äçüé§Creator' | 'üßë‚Äçüé§–ü–∏–∑–¥–∞—Ç—ã–π —á–µ–ª':
            await bot.send_message(message.chat.id,
                                   text=Lang(1),
                                   parse_mode='Markdown')
        case 'üëã–ü–æ–ª—É—á–∏—Ç—å –ì–î–ó' | 'üëãGet GDZ' | 'üëã–ù–ê –ü–û –ï–ë–ê–õ–£':
            await message.answer(Lang(2))
            await getGdz.getLesson.set()
        case 'üîß–ù–∞—Å—Ç—Ä–æ–π–∫–∏' | 'üîßSettings' | 'üîß–í–æ–ø—Ä–æ—Å–∏–∫–∏':
            await bot.send_message(message.chat.id,
                                   text=Lang(13),
                                   parse_mode='HTML',
                                   reply_markup=langs)
        case _:
            await bot.send_message(message.chat.id,
                                   text=Lang(3),
                                   parse_mode='Markdown')


def siteReq(lesson, number):
    gdzUrl = f'https://gdz.ltd/content/8-class/angliyskiy/Ter_Minasovaj/exercise/{lesson}/{number}.jpg'
    with open('answers_database.txt', encoding='utf8') as f:
        datafile = f.readlines()
    for line in datafile:
        if gdzUrl in line:
            r = requests.get(gdzUrl)
            return r.content
    return -1


class getGdz(StatesGroup):
    getLesson = State()
    getNumber = State()


@dp.message_handler(Command('start'), state=None)
async def welcome(message):
    joinedFile = open("users_database.txt","r", encoding="utf8") #–ß–µ–∫–∞–µ–º, –µ—Å—Ç—å –ª–∏ —á–µ–ª –≤ –±–¥ –∏ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
    joinedUsers = set ()
    for line in joinedFile:
        joinedUsers.add(line.strip())

    if not str(message.chat.id) in joinedUsers:
        joinedFile = open("users_database.txt","a", encoding="utf8")
        joinedFile.write(str(message.chat.id)+ "\n")
        joinedUsers.add(message.chat.id)
    #await bot.send_message(message.chat.id,
    #                        f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.first_name}!* –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–∑–≤–∞–Ω –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É.\n*–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!*",
    #                        reply_markup=Parameters.start, parse_mode='Markdown')
        #with open('saved_dictionary.pkl', 'wb') as f:
        #    pickle.dump(Parameters.d, f)
    Parameters.start = types.ReplyKeyboardMarkup(resize_keyboard=True)
    Parameters.info = types.KeyboardButton(Lang(9))
    Parameters.creator = types.KeyboardButton(Lang(10))
    Parameters.mainButton = types.KeyboardButton(Lang(11))
    #Parameters.settings = types.KeyboardButton(Lang(12))
    Parameters.start.add(Parameters.mainButton)
    Parameters.start.add(
        Parameters.info, Parameters.creator, Parameters.settings)
    await bot.send_message(message.chat.id,
                            f'*‚úÖ–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ*\n*–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:* {VERSION}',
                            reply_markup=Parameters.start, parse_mode='Markdown')
        #with open('saved_dictionary.pkl', 'wb') as f:
        #    pickle.dump(Parameters.d, f)
    
    


@dp.message_handler(Command('stats'), state=None)
async def statistic(message):
    if message.chat.id == config.admin:
        d = sum(1 for line in open('users_database.txt', encoding='utf8'))
        await bot.send_message(message.chat.id,
                               text=f'–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞: *{d}* —á–µ–ª–æ–≤–µ–∫',
                               parse_mode='Markdown')
    else:
        await bot.send_message(message.chat.id,
                               text=Lang(4),
                               parse_mode='Markdown')


@dp.message_handler(commands=['send'])
async def sending(message):
    if message.chat.id == config.admin:
        await bot.send_message(message.chat.id, "*–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å \n–ë–æ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –∫–æ–≥–¥–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–∫–æ–Ω—á–∏—Ç*", parse_mode='Markdown')
        receive_users, block_users = 0, 0
        joinedFile = open ("users_database.txt", "r", encoding="utf8")
        jionedUsers = set()
        for line in joinedFile:
            jionedUsers.add(line.strip())
        joinedFile.close()
        for user in jionedUsers:
            try:
                await bot.send_photo(user, 
                open('update.png', 'rb'), 
                message.text[message.text.find(' '):])
                receive_users += 1
            except BotBlocked:
                block_users += 1
            await asyncio.sleep(0.4)
        await bot.send_message(message.chat.id, f"*–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ *\n"
                               f"–ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: *{receive_users}*\n"
                               f"–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: *{block_users}*", parse_mode='Markdown')
    else:
        await bot.send_message(message.chat.id,
                               text='–£ —Ç–µ–±—è –Ω–µ—Ç –∞–¥–º–∏–Ω–∫–∏\n*–ö—É–¥–∞ —Ç—ã –ø–æ–ª–µ–∑?*',
                               parse_mode='Markdown')


@dp.message_handler(content_types=['text'])
async def get_message(message):
    await caseChoose(message)


@dp.message_handler(state=getGdz.getLesson)
async def getLesson(message: types.Message, state: FSMContext):
    try:
        lesson = int(message.text)
    except ValueError:
        await state.finish()
        await caseChoose(message)
        # await bot.send_message(message.chat.id,
        #                       text=Lang(5),
        #                       parse_mode='Markdown')
        #Parameters.delCount += 2

    else:
        await state.update_data(lesson=lesson)
        await message.answer(Lang(6))
        await getGdz.getNumber.set()


@dp.message_handler(state=getGdz.getNumber)
async def getNumber(message: types.Message, state: FSMContext):
    try:
        number = int(message.text)
    except ValueError:
        await state.finish()
        await caseChoose(message)
        # await bot.send_message(message.chat.id,
        #                       text=Lang(5),
        #                       parse_mode='Markdown')
        #Parameters.delCount += 2
    else:
        await state.update_data(number=number)
        data = await state.get_data()
        await bot.send_message(message.chat.id,
                               text=Lang(7),
                               parse_mode='Markdown')
        Parameters.lesson = data.get("lesson")
        Parameters.number = data.get("number")
        photo = siteReq(Parameters.lesson, Parameters.number)
        if photo == -1:
            await bot.send_message(message.chat.id,
                                   text=Lang(8),
                                   parse_mode='Markdown')
        else:
            try:
                await bot.send_photo(message.chat.id,
                                     photo=photo,
                                     reply_markup=arrows)
            except PhotoDimensions:
                fileByte = io.BytesIO(photo)
                fileByte.name = f"{Parameters.number}.jpg"
                await bot.send_document(message.chat.id,
                                        fileByte,
                                        reply_markup=arrows)
            for i in range(2):
                await bot.delete_message(message.chat.id, message.message_id+i)
            for i in range(1, Parameters.delCount):
                await bot.delete_message(message.chat.id, message.message_id-i)
            Parameters.delCount = 5
        await state.finish()


@dp.callback_query_handler(text_contains='–ü—Ä–µ–¥—ã–¥—É—â–∏–∏–π –Ω–æ–º–µ—Ä')
async def prevNumber(call: types.CallbackQuery):
    Parameters.number -= 1
    photo = siteReq(Parameters.lesson, Parameters.number)
    if photo == -1:
        Parameters.lesson -= 1
        Parameters.number = 1
        photo = siteReq(Parameters.lesson, Parameters.number)
    photoByte = io.BytesIO(photo)
    try:
        await bot.edit_message_media(
            types.InputMediaPhoto(photoByte),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=arrows)
    except PhotoDimensions:
        photoByte = io.BytesIO(photo)
        photoByte.name = f'{Parameters.number}.jpg'
        await bot.edit_message_media(
            types.InputMediaDocument(photoByte),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=arrows)
    await call.answer()


@dp.callback_query_handler(text_contains='–£–¥–∞–ª–∏—Ç—å')
async def delt(call: types.CallbackQuery):
    await bot.delete_message(
        chat_id=call.from_user.id,
        message_id=call.message.message_id)


@dp.callback_query_handler(text_contains='–°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä')
async def nextNumber(call: types.CallbackQuery):
    Parameters.number += 1
    photo = siteReq(Parameters.lesson, Parameters.number)
    if photo == -1:
        Parameters.lesson += 1
        Parameters.number = 1
        photo = siteReq(Parameters.lesson, Parameters.number)
    photoByte = io.BytesIO(photo)
    try:
        await bot.edit_message_media(
            types.InputMediaPhoto(photoByte),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=arrows)
    except PhotoDimensions:
        photoByte = io.BytesIO(photo)
        photoByte.name = f'{Parameters.number}.jpg'
        await bot.edit_message_media(
            types.InputMediaDocument(photoByte),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=arrows)
    await call.answer()


'''@dp.callback_query_handler(text_contains='rus')
async def rus(call: types.CallbackQuery):
    Parameters.lang = 'Russian'
    Parameters.d[str(call.message.chat.id)] = 'Russian'
    await bot.send_message(call.message.chat.id,
                           text='*‚úÖ–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫* –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É –Ω–∞–∂–º–∏—Ç–µ /start',
                           parse_mode='Markdown')
    await call.answer()


@dp.callback_query_handler(text_contains='en')
async def rus(call: types.CallbackQuery):
    Parameters.lang = 'English'
    Parameters.d[str(call.message.chat.id)] = 'English'
    await bot.send_message(call.message.chat.id,
                           text='*‚úÖTo change the language* of the buttons at the bottom, press /start',
                           parse_mode='Markdown')
    await call.answer()


@dp.callback_query_handler(text_contains='gay')
async def rus(call: types.CallbackQuery):
    Parameters.lang = 'roflRus'
    Parameters.d[str(call.message.chat.id)] = 'roflRus'
    await bot.send_message(call.message.chat.id,
                           text='*‚úÖ–í—Å—ë, –∑–∞–µ–±—É–º–±–∞* —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —ë–±–Ω–∏ –ø–æ /start, —á—Ç–æ–± —Ö—É–π–Ω–∏ —Å–Ω–∏–∑—É –æ–±–Ω–æ–≤–∏–ª–∏—Å—å',
                           parse_mode='Markdown')
    await call.answer()'''

if __name__ == '__main__':
    logging.info('Bot started...')
executor.start_polling(dp)
